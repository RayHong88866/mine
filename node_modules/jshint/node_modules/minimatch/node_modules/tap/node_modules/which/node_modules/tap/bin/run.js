#!/usr/bin/env node
var node = process.execPath
var fs = require('fs')
var spawn = require('child_process').spawn
var fg = require('foreground-child')
var opener = require('opener')
var supportsColor = require('supports-color')
var nycBin = require.resolve('nyc/bin/nyc.js')
var glob = require('glob')
var isexe = require('isexe')

var coverageServiceTest = process.env.COVERAGE_SERVICE_TEST === 'true'

// console.error(process.argv.join(' '))
// console.error('CST=%j', process.env.COVERAGE_SERVICE_TEST)
// console.error('CRT=%j', process.env.COVERALLS_REPO_TOKEN)
// console.error('CCT=%j', process.env.CODECOV_TOKEN)
if (coverageServiceTest) {
  console.log('COVERAGE_SERVICE_TEST')
}

// Add new coverage services here.
// it'll check for the environ named and pipe appropriately.
var coverageServices = [
  {
    env: 'COVERALLS_REPO_TOKEN',
    bin: require.resolve('coveralls/bin/coveralls.js'),
    name: 'Coveralls'
  },
  {
    env: 'CODECOV_TOKEN',
    bin: require.resolve('codecov.io/bin/codecov.io.js'),
    name: 'Codecov'
  }
]

main()

function main () {
  var args = process.argv.slice(2)

  if (!args.length && process.stdin.isTTY) {
    console.error(usage())
    process.exit(1)
  }

  var options = parseArgs(args)

  if (!options) {
    return
  }

  process.stdout.on('error', function (er) {
    if (er.code === 'EPIPE') {
      process.exit()
    } else {
      throw er
    }
  })

  options.files = globFiles(options.files)

  if ((options.coverageReport || options.checkCoverage) &&
      options.files.length === 0) {
    runCoverageReport(options)
    return
  }

  if (options.files.length === 0) {
    console.error('Reading TAP data from stdin (use "-" argument to suppress)')
    options.files.push('-')
  }

  if (options.files.length === 1 && options.files[0] === '-') {
    if (options.coverage) {
      console.error('Coverage disabled because stdin cannot be instrumented')
    }
    stdinOnly(options)
    return
  }

  // By definition, the next block cannot be covered, because
  // they are only relevant when coverage is turned off.

  /* istanbul ignore if */
  if (options.coverage && !global.__coverage__) {
    respawnWithCoverage(options)
    return
  }

  setupTapEnv(options)

  runTests(options)
}

function parseArgs (args) {
  var options = {}

  options.nodeArgs = []
  options.nycArgs = []
  options.timeout = process.env.TAP_TIMEOUT || 30
  // coverage tools run slow.
  /* istanbul ignore else */
  if (global.__coverage__) {
    options.timeout = 240
  }

  options.color = supportsColor
  if (process.env.TAP_COLORS !== undefined) {
    options.color = !!(+process.env.TAP_COLORS)
  }
  options.reporter = null
  options.files = []
  options.bail = false
  options.saveFile = null

  var singleFlags = {
    b: 'bail',
    B: 'no-bail',
    c: 'color',
    C: 'no-color',
    h: 'help',
    '?': 'help',
    v: 'version'
  }
  var singleOpts = {
    R: 'reporter',
    t: 'timeout',
    s: 'save'
  }

  // If we're running under Travis-CI with a Coveralls.io token,
  // then it's a safe bet that we ought to output coverage.
  options.pipeToService = false
  for (var i = 0; i < coverageServices.length && !options.pipeToService; i++) {
    if (process.env[coverageServices[i].env]) {
      options.pipeToService = true
    }
  }

  var defaultCoverage = options.pipeToService

  options.coverageReport = null

  for (i = 0; i < args.length; i++) {
    var arg = args[i]
    if (arg.charAt(0) !== '-' || arg === '-') {
      options.files.push(arg)
      continue
    }

    // short-flags
    if (arg.charAt(1) !== '-' && arg !== '-gc') {
      var expand = []
      for (var f = 1; f < arg.length; f++) {
        var fc = arg.charAt(f)
        var sf = singleFlags[fc]
        var so = singleOpts[fc]
        if (sf) {
          expand.push('--' + sf)
        } else if (so) {
          var soval = arg.slice(f + 1)
          if (soval.charAt(0) !== '=') {
            soval = '=' + soval
          }
          expand.push('--' + so + soval)
          f = arg.length
        } else if (arg !== '-' + fc) {
          expand.push('-' + fc)
        }
      }
      if (expand.length) {
        args.splice.apply(args, [i, 1].concat(expand))
        i--
        continue
      }
    }

    var key = arg
    var val = null
    if (key.match(/^--/) && arg.indexOf('=') !== -1) {
      var kv = arg.split('=')
      key = kv.shift()
      val = kv.join('=')
    }

    switch (key) {
      case '--help':
        console.log(usage())
        return null

      case '--nyc-help':
        nycHelp()
        return null

      case '--nyc-version':
