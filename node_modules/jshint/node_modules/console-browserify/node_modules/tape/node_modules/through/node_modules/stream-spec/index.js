var a = require('assert')
var macgyver = require('macgyver')
var Stream = require('stream')

function merge (to, from) {
  to = to || {}
  for (var k in from)
    if('undefined' === typeof to[k])
      to[k] = from[k]
  return to
}


module.exports = function (stream, opts) {
  
  a.ok(stream instanceof Stream)
  a.ok('function', typeof stream.pipe)
  a.ok('function', typeof stream.destroy)

  var mac = macgyver()
  var opts = merge(('string' == typeof opts ? {name: opts} : opts) || {}, {name: 'stream'})
  var spec = {}
  function add(name, method) {
    spec[name] = function (_opts) {
      method(mac, stream, merge(_opts, opts))
      return this
    }
  }

  add('through'     , throughSpec)
  add('basic'       , throughSpec) //legacy, remove this.
  add('duplex'      , duplexSpec)
  add('readable'    , readableSpec)
  add('writable'    , writableSpec)
  add('pausable'    , pauseSpec)
  add('drainable'   , drainSpec)
  add('strictPause' , strictSpec)

  spec.all = function (opts) {
    if(stream.writable &&