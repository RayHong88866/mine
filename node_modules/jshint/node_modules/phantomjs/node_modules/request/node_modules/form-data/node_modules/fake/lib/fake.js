var ExpectedCall = require('./expected_call');
var Collection = require('./collection');
var FakeFunction = require('./fake_function');
var FakeCall = require('./fake_call');
var FakeObject = require('./fake_object');
var StackTrace = require('./stack_trace');
var util = require('util');

module.exports = Fake;

function Fake(properties) {
  this.calls = [];

  this._anytime = new Collection();
  this._next = new Collection();
  this._stub = new Collection();
  this._functions = new Collection();

  for (var property in properties) {
    this[property] = properties[property];
  }
}

Fake._instances = [];

Fake.create = function() {
  var fake = new this();
  this._instances.push(fake);
  return fake;
};

Fake._autoVerify = function() {
  this._instances.forEach(function(fake) {
    fake.verify();
  });
}
process.on('exit', Fake._autoVerify.bind(Fake));

Fake.prototype.expect = function(/* object, method, times, withArgs, andReturn */) {
  var params = this._mangleParams(arguments);
  return this._expect(this._next, params, arguments.callee);
};

Fake.prototype.expectAnytime = function(/* object, method, times, withArgs, andReturn */) {
  var params = this._mangleParams(arguments);
  return this._expect(this._anytime, params, arguments.callee);
};

Fake.prototype.stub = function(/* object, method, times, withArgs, andReturn */) {
  var params = this._mangleParams(arguments);
  return this._expect(this._stub, params, arguments.callee);
};

Fake.prototype._mangleParams = function(args) {
  args = Array.prototype.s